# A friendly name for your workflow, which will be displayed on GitHub.
name: Build, Test, and Create Docker Image

# Define the triggers for this workflow.
on:
  # Run on pushes to the 'new2' branch.
  push:
    branches: [ "new1" ]
  # Also run on pull requests targeting the 'new2' branch.
  pull_request:
    branches: [ "new1" ]

# Define the jobs that will run as part of the workflow.
jobs:
  build-and-test:
    # The type of virtual machine to run the job on. 'ubuntu-latest' is standard and efficient.
    runs-on: ubuntu-latest

    # A sequence of tasks that will be executed for this job.
    steps:
      # Step 1: Check out your repository's code so the workflow can access it.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up a Python environment for running the tests.
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Should match your Dockerfile's Python version

      # Step 3: Install Python dependencies needed for testing.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt

      # Step 4: Run the Pytest tests.
      - name: Run Pytest
        run: pytest app/tests/

      # Step 5: Set up Docker Buildx for more advanced build features.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 6: Log in to Docker Hub. This uses secrets for security.
      # You must create these secrets in your GitHub repository settings.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 7: Build the Docker images using docker-compose.
      # This verifies that your Dockerfiles are correct and the images can be built.
      - name: Build Docker images
        run: docker-compose build